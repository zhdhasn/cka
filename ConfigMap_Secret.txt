Environment Variable:
-e (flag)

In Docker:
docker run -d --name mysql -p 3306 -e MYSQL_ROOT_PASSWORD=password1 mysql:latest

docker container ls -a | grep -i mysql

docker container rm -f mysql

To enter Mysql Container: #docker exec -it mysql /bin/sh
			  #mysql -u root -p

docker container stop mysql

In Kubernetes:
kubectl run mysql --image=mysql --port=3306 -o yaml --dry-run=client > mysql.yaml
vi mysql.yaml

spec:
  containers:
  - image: mysql
    name: mysql
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: password12
    ports:

kubectl apply -f mysql.yaml

kubectl exec -it mysql -- /bin/bash


Config Map:-------------------------------------------------------------->
Configuration Map 
simply store environment variable in a file as a plain text.


kubectl run webservice --image=kodekloud/webapp-color --port=8080 -o yaml --dry-run=client > webservice.yaml

kubectl apply -f webservice.yaml

kubectl expose pod webservice --name=webservice --port=8080 --type=NodePort -o yaml --dry-run=client > webservice-svc.yaml

kubectl get svc

Now change background color:

Configuring Configmap:

create a deploy:
kubectl create deploy webservice-dpl --image=kodekloud/webapp-color --port=8080 -o yaml --dry-run=client > webservice-dpl.yaml

vi webservice-dpl.yaml 
spec:
      containers:
      - image: kodekloud/webapp-color
        name: webapp-color
        envFrom:
        - configMapRef:
                name: color-cm



Create config map:
kubectl create configmap <name>
 -- from-literal=<key>=<value>
 -- from-literal=<key>=<value>

kubectl create cm color-cm --from-literal=APP_COLOR=blue
kubectl get cm
kubectl describe cm color-cm
kubectl edit cm color-cm

kubectl apply -f webservice-dpl.yaml
kubectl expose deploy webservice-dpl --name=webservice-dpl --port=8080 --type=NodePort

Now check on browser.

kubectl edit cm color-cm
apiVersion: v1
data:
  APP_COLOR: yellow
kind: ConfigMap

Now restart deploy:
kubectl rollout restart deploy/webservice-dpl

Again:
kubectl create deploy mysql --image=mysql --port=3306 -o yaml --dry-run=client > mysql-dpl.yaml

vi mysql-dpl.yaml

     spec:
      containers:
      - image: mysql
        name: mysql
        ports:
        - containerPort: 3306
        envFrom:
        - configMapRef:
             name: mysql-cm

Create CM:
kubectl create cm mysql-cm --from-literal=MYSQL_ROOT_PASSWORD=password12
kubectl describe cm mysql-cm

Secret >------------------------------------------------------------------
Kubernetes Environment Variable store as base64 format

kubectl create secret generic mysql-secret --from-literal=MYSQL_ROOT_PASSWORD=password




Decode:
echo -n "" | base64 --decode
echo -n "password" | base64

cGFzc3dvcmQ=
--------------------------------------------------------------------------
Create a decode password:

echo -n "Password1" | base64
UGFzc3dvcmQx

vi mysql-pass.yaml

apiVersion: v1
kind: Secret
metadata:
        name: mysql-pass
data:
        MYSQL_ROOT_PASSWORD: UGFzc3dvcmQx


kubectl apply -f mysql-pass.yaml

Now edit on MySql Container YAML.

vi mysql-dpl.yaml


- containerPort: 3306
        envFrom:
        - secretRef:
             name: mysql-pass

kubectl apply -f mysql-dpl.yaml

--------------------------------------------------------------------------------------
kubectl run mysql --image=mysql --port=3306 -o yaml --dry-run=client > mysql-db-svc.yaml

vi mysql-db-svc.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: mysql
  name: mysql
spec:
  containers:
  - image: mysql
    name: mysql
    ports:
    - containerPort: 3306
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: password999

check database:

kubectl exec -it mysql /bin/sh

kubectl expose pods mysql --name=mysql --port=3306 --type=ClusterIp -o yaml --dry-run=client >> mysql-db-svc.yaml

kubectl apply -f mysql-db-svc.yaml
pod/mysql created
service/mysql created

kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
mysql   1/1     Running   0          17s

root@cka-master:~/secret# kubectl get svc
NAME           TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
kubernetes     ClusterIP   10.96.0.1      <none>        443/TCP          48d
mysql          ClusterIP   10.99.54.204   <none>        3306/TCP         32s


DB_Host=bXlzcWw=
DB_Password=cGFzc3dvcmQx
DB_User=cm9vdA==

kubectl create secret generic mysql-env --from-literal=DB_Host=mysql --from-literal=DB_Password=password1 --from-literal=DB_User=root --from-literal=DB_Port=3306

Now create a webapp with simple mysql

kubectl run webapp-pod --image=kodekloud/simple-webapp-mysql --port=8080 -o yaml --dry-run=client > webapp-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: webapp-pod
  name: webapp-pod
spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    name: webapp-pod
    ports:
    - containerPort: 8080
    envFrom:
    - secretRef:
            name: mysql-env

kubectl apply -f webapp-pod.yaml

Now Expose this pod:
kubectl expose pods webapp-pod --port=8080 --type=NodePort





  DB_Name: bXlzcWw=
  DB_Password: cGFzc3dvcmQw
  DB_Port: MzMwNg==
  DB_User: cm9vdA==









